---
AWSTemplateFormatVersion: "2010-09-09"
Description: Base template for non-production accounts
Parameters:
  ProductionAccountId:
    Type: String
    Description: Production account ID
  ExecutionRoleName:
    Type: String
    Description: Execution IAM role name
    Default: RoleCreationExecution
  DeploymentRoleName:
    Type: String
    Description: Deployment IAM role name
    Default: DeploymentRole

Resources:
  ArtifactBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: "aws/s3"
              SSEAlgorithm: "aws:kms"
      LifecycleConfiguration:
        Rules:
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
            ExpirationInDays: 7
            Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ArtifactBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref ArtifactBucket
      PolicyDocument:
        Statement:
          - Sid: DenyIncorrectEncryptionHeader
            Effect: Deny
            Principal: "*"
            Action: "s3:PutObject"
            Resource: !Sub "${ArtifactBucket.Arn}/*"
            Condition:
              StringNotEquals:
                "s3:x-amz-server-side-encryption": "aws:kms"
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: "*"
            Action: "s3:PutObject"
            Resource: !Sub "${ArtifactBucket.Arn}/*"
            Condition:
              "Null": # must be a quoted string
                "s3:x-amz-server-side-encryption": "true"
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource: !Sub "${ArtifactBucket.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "false"
          - Sid: AllowProductionAccountAccess
            Effect: Allow
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${ProductionAccountId}:root"
            Action: "s3:Get*"
            Resource: !Sub "${ArtifactBucket.Arn}/*"

  PipelineKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: !Sub "${AWS::StackName} Pipeline Key"
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Sid: Allow access for Key Administrators
            Effect: Allow
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${ExecutionRoleName}"
            Action:
              - "kms:Create*"
              - "kms:Describe*"
              - "kms:Enable*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:Update*"
              - "kms:Revoke*"
              - "kms:Disable*"
              - "kms:Get*"
              - "kms:Delete*"
              - "kms:TagResource"
              - "kms:UntagResource"
              - "kms:ScheduleKeyDeletion"
              - "kms:CancelKeyDeletion"
            Resource: "*"
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt "CodePipelineRole.Arn"
                - !GetAtt "CodeBuildRole.Arn"
                - !GetAtt "CodeDeployRole.Arn"
                - !GetAtt "CloudFormationRole.Arn"
                - !Sub "arn:${AWS::Partition}:iam::${ProductionAccountId}:root"
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: "*"
          - Sid: Allow attachment of persistent resources
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt "CodePipelineRole.Arn"
                - !GetAtt "CodeBuildRole.Arn"
                - !GetAtt "CodeDeployRole.Arn"
                - !GetAtt "CloudFormationRole.Arn"
                - !Sub "arn:${AWS::Partition}:iam::${ProductionAccountId}:root"
            Action:
              - "kms:CreateGrant"
              - "kms:ListGrants"
              - "kms:RevokeGrant"
            Resource: "*"
            Condition:
              Bool:
                "kms:GrantIsForAWSResource": "true"
      KeyUsage: ENCRYPT_DECRYPT
      PendingWindowInDays: 7

  PipelineAlias:
    Type: "AWS::KMS::Alias"
    Properties:
      AliasName: "alias/pipeline"
      TargetKeyId: !Ref PipelineKey

  CodePipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: CodePipelineRole
      Description: !Sub "DO NOT DELETE - Used by CodePipeline. Created by CloudFormation ${AWS::StackId}"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: "codepipeline.amazonaws.com"
            Action: "sts:AssumeRole"

  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: CodeBuildRole
      Description: !Sub "DO NOT DELETE - Used by CodeBuild. Created by CloudFormation ${AWS::StackId}"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: "codebuild.amazonaws.com"
            Action: "sts:AssumeRole"

  CloudFormationRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: CloudFormationRole
      Description: !Sub "DO NOT DELETE - Used by CloudFormation. Created by CloudFormation ${AWS::StackId}"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: "cloudformation.amazonaws.com"
            Action: "sts:AssumeRole"
      PermissionsBoundary: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/PermissionBoundary"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CloudFormationPolicy"

  CodeDeployRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: CodeDeployRole
      Description: !Sub "DO NOT DELETE - Used by CodeDeploy. Created by CloudFormation ${AWS::StackId}"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: "codedeploy.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AWSCodeDeployRoleForECS"

  ArtifactPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: ArtifactPolicy
      Description: "DO NOT DELETE - Used by CodePipeline, CodeBuild and CodeDeploy. Created by CloudFormation ${AWS::StackId}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:GetObjectVersion"
              - "s3:PutObject"
            Resource: !Sub "${ArtifactBucket.Arn}/*"
          - Effect: Allow
            Action:
              - "s3:ListBucket"
              - "s3:GetBucketLocation"
              - "s3:GetBucketPolicy"
            Resource: !GetAtt ArtifactBucket.Arn
      Roles:
        - !Ref CodePipelineRole
        - !Ref CodeBuildRole
        - !Ref CodeDeployRole

  CodePipelinePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: CodePipelinePolicy
      Description: "DO NOT DELETE - Used by CodePipeline. Created by CloudFormation ${AWS::StackId}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "codecommit:CancelUploadArchive"
              - "codecommit:GetBranch"
              - "codecommit:GetCommit"
              - "codecommit:GetUploadArchiveStatus"
              - "codecommit:ListBranches"
              - "codecommit:UploadArchive"
            Resource: !Sub "arn:${AWS::Partition}:codecommit:*:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
              - "codebuild:BatchGetBuilds"
              - "codebuild:StartBuild"
            Resource: !Sub "arn:${AWS::Partition}:codebuild:*:${AWS::AccountId}:project/*"
          - Effect: Allow
            Action: "sns:Publish"
            Resource: !Sub "arn:${AWS::Partition}:sns:*:${AWS::AccountId}:*"
          - Effect: Allow
              - 'iam:GetRole'
              - 'iam:PassRole'
            Resource:
              - !GetAtt CloudFormationRole.Arn
              - !GetAtt CodeDeployRole.Arn
          - Effect: Allow
            Action:
              - "cloudformation:DescribeChangeSet"
              - "cloudformation:DescribeStacks"
              - "cloudformation:ExecuteChangeSet"
            Resource: !Sub "arn:${AWS::Partition}:cloudformation:*:${AWS::AccountId}:stack/*"
          - Effect: Allow
            Action: "cloudformation:CreateChangeSet"
            Resource: !Sub "arn:${AWS::Partition}:cloudformation:*:${AWS::AccountId}:stack/*"
            Condition:
              ArnEquals:
                "cloudformation:RoleArn": !GetAtt CloudFormationRole.Arn
      Roles:
        - !Ref CodePipelineRole

  CodeBuildPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: CodeBuildPolicy
      Description: "DO NOT DELETE - Used by CodeBuild. Created by CloudFormation ${AWS::StackId}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "logs:CreateLogGroup"
            Resource: "*" # does not support resource ARNs
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: !Sub "arn:${AWS::Partition}:logs:*:${AWS::AccountId}:log-group:/aws/codebuild/*"
      Roles:
        - !Ref CodeBuildRole

  AssumeProductionPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: AssumeProductionPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Resource: !Sub "arn:${AWS::Partition}:iam::${ProductionAccountId}:role/${DeploymentRoleName}"
      Roles:
        - !Ref CodePipelineRole
        - !Ref CodeBuildRole
        - !Ref CodeDeployRole

  DevelopersPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: DevelopersPolicy
      Description: "DO NOT DELETE - Allows developers to use build tools. Created by CloudFormation ${AWS::StackId}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "codebuild:*"
              - "codedeploy:*"
              - "codepipeline:*"
            Resource:
              - !Sub "arn:${AWS::Partition}:codebuild:*:${AWS::AccountId}:build/*"
              - !Sub "arn:${AWS::Partition}:codebuild:*:${AWS::AccountId}:project/*"
              - !Sub "arn:${AWS::Partition}:codebuild:*:${AWS::AccountId}:report/*"
              - !Sub "arn:${AWS::Partition}:codebuild:*:${AWS::AccountId}:report-group/*"
              - !Sub "arn:${AWS::Partition}:codedeploy:*:${AWS::AccountId}:application:*"
              - !Sub "arn:${AWS::Partition}:codedeploy:*:${AWS::AccountId}:deploymentconfig:*"
              - !Sub "arn:${AWS::Partition}:codedeploy:*:${AWS::AccountId}:deploymentgroup:*"
              - !Sub "arn:${AWS::Partition}:codepipeline:*:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
              - "cloudformation:DescribeChangeSet"
              - "cloudformation:DescribeStacks"
              - "cloudformation:ExecuteChangeSet"
            Resource: !Sub "arn:${AWS::Partition}:cloudformation:*:${AWS::AccountId}:stack/*"
          - Effect: Allow
            Action:
              - "cloudformation:CreateStack"
              - "cloudformation:CreateChangeSet"
            Resource: !Sub "arn:${AWS::Partition}:cloudformation:*:${AWS::AccountId}:stack/*"
            Condition:
              ArnEquals:
                "cloudformation:RoleArn": !GetAtt CloudFormationRole.Arn
          - Effect: Allow
            Action:
              - "iam:GetRole"
              - "iam:PassRole"
            Resource: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/rcs/*"
          - Effect: Allow
            Action:
              - "iam:GetRole"
              - "iam:PassRole"
            Resource: !GetAtt CloudFormationRole.Arn
            Condition:
              StringLike:
                "iam:PassedToService": "cloudformation.amazonaws.com"
          - Effect: Allow
            Action:
              - "iam:GetRole"
              - "iam:PassRole"
            Resource: !GetAtt CodeBuildRole.Arn
            Condition:
              StringLike:
                "iam:PassedToService": "codebuild.amazonaws.com"
          - Effect: Allow
            Action:
              - "iam:GetRole"
              - "iam:PassRole"
            Resource: !GetAtt CodeDeployRole.Arn
            Condition:
              StringLike:
                "iam:PassedToService": "codedeploy.amazonaws.com"
          - Effect: Allow
            Action:
              - "iam:GetRole"
              - "iam:PassRole"
            Resource: !GetAtt CodePipelineRole.Arn
            Condition:
              StringLike:
                "iam:PassedToService": "codepipeline.amazonaws.com"
