---
AWSTemplateFormatVersion: "2010-09-09"
Description: Base IAM roles for all accounts

Parameters:
  CidrBlock:
    Type: String
    Description: VPC CIDR Block
    Default: "172.31.0.0/22"
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  SubnetMask:
    Type: String
    Description: Subnet CIDR Mask
    Default: "26"
    AllowedValues:
      - "26"
      - "27"
      - "28"
  CreateInternetGateway:
    Type: String
    Description: Set to 'true' to create an Internet Gateway for the Public subnets
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
  CreateVPCEndpoints:
    Type: String
    Description: Set to 'true' to create S3 and DynamoDB VPC Gateway Endpoints
    Default: "false"
    AllowedValues:
      - "true"
      - "false"

Conditions:
  CreateInternetGateway: !Not [!Equals [!Ref CreateInternetGateway, "false"]]
  CreateVPCEndpoints: !Not [!Equals [!Ref CreateVPCEndpoints, "false"]]
  NorthernVirginiaRegion: !Equals [!Ref "AWS::Region", "us-east-1"]

Mappings:
  CidrBitsMap:
    "26":
      "CidrBits": 6
    "27":
      "CidrBits": 5
    "28":
      "CidrBits": 4

Resources:
  DHCPOptions:
    Type: "AWS::EC2::DHCPOptions"
    Properties:
      DomainName: !If
        - NorthernVirginiaRegion
        - "ec2.internal"
        - !Sub "${AWS::Region}.compute.internal"
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DHCPOptionsSet

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref "AWS::StackName"

  VPCDHCPOptionsAssociation:
    Type: "AWS::EC2::VPCDHCPOptionsAssociation"
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref DHCPOptions

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Condition: CreateInternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-igw"
        - Key: Network
          Value: Public

  InternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Condition: CreateInternetGateway
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  AppSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock:
        !Select [
          0,
          !Cidr [
            !Ref CidrBlock,
            9,
            !FindInMap [CidrBitsMap, !Ref SubnetMask, "CidrBits"],
          ],
        ]
      Tags:
        - Key: Name
          Value:
            !Join ["-", [!Ref "AWS::StackName", "app", !Select [0, !GetAZs ""]]]
        - Key: Network
          Value: Private
      VpcId: !Ref VPC

  AppRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-app-${AppSubnet1.AvailabilityZone}"
        - Key: Network
          Value: Private

  AppRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref AppRouteTable1
      SubnetId: !Ref AppSubnet1

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock:
        !Select [
          1,
          !Cidr [
            !Ref CidrBlock,
            9,
            !FindInMap [CidrBitsMap, !Ref SubnetMask, "CidrBits"],
          ],
        ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            !Join [
              "-",
              [!Ref "AWS::StackName", "public", !Select [0, !GetAZs ""]],
            ]
        - Key: Network
          Value: Public
      VpcId: !Ref VPC

  PublicRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-public-${PublicSubnet1.AvailabilityZone}"
        - Key: Network
          Value: Public

  PublicRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      SubnetId: !Ref PublicSubnet1

  PublicRoute1:
    Type: "AWS::EC2::Route"
    Condition: CreateInternetGateway
    DependsOn: InternetGatewayAttachment
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId: !Ref PublicRouteTable1
      GatewayId: !Ref InternetGateway

  DBSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock:
        !Select [
          2,
          !Cidr [
            !Ref CidrBlock,
            9,
            !FindInMap [CidrBitsMap, !Ref SubnetMask, "CidrBits"],
          ],
        ]
      Tags:
        - Key: Name
          Value:
            !Join ["-", [!Ref "AWS::StackName", "db", !Select [0, !GetAZs ""]]]
        - Key: Network
          Value: Private
      VpcId: !Ref VPC

  DBRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-db-${DBSubnet1.AvailabilityZone}"
        - Key: Network
          Value: Private

  DBRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref DBRouteTable1
      SubnetId: !Ref DBSubnet1

  AppSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock:
        !Select [
          3,
          !Cidr [
            !Ref CidrBlock,
            9,
            !FindInMap [CidrBitsMap, !Ref SubnetMask, "CidrBits"],
          ],
        ]
      Tags:
        - Key: Name
          Value:
            !Join ["-", [!Ref "AWS::StackName", "app", !Select [1, !GetAZs ""]]]
        - Key: Network
          Value: Private
      VpcId: !Ref VPC

  AppRouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-app-${AppSubnet2.AvailabilityZone}"
        - Key: Network
          Value: Private

  AppRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref AppRouteTable2
      SubnetId: !Ref AppSubnet2

  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock:
        !Select [
          4,
          !Cidr [
            !Ref CidrBlock,
            9,
            !FindInMap [CidrBitsMap, !Ref SubnetMask, "CidrBits"],
          ],
        ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            !Join [
              "-",
              [!Ref "AWS::StackName", "public", !Select [1, !GetAZs ""]],
            ]
        - Key: Network
          Value: Public
      VpcId: !Ref VPC

  PublicRouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-public-${PublicSubnet2.AvailabilityZone}"
        - Key: Network
          Value: Public

  PublicRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      SubnetId: !Ref PublicSubnet2

  PublicRoute2:
    Type: "AWS::EC2::Route"
    Condition: CreateInternetGateway
    DependsOn: InternetGatewayAttachment
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId: !Ref PublicRouteTable2
      GatewayId: !Ref InternetGateway

  DBSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock:
        !Select [
          5,
          !Cidr [
            !Ref CidrBlock,
            9,
            !FindInMap [CidrBitsMap, !Ref SubnetMask, "CidrBits"],
          ],
        ]
      Tags:
        - Key: Name
          Value:
            !Join ["-", [!Ref "AWS::StackName", "db", !Select [1, !GetAZs ""]]]
        - Key: Network
          Value: Private
      VpcId: !Ref VPC

  DBRouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-db-${DBSubnet2.AvailabilityZone}"
        - Key: Network
          Value: Private

  DBRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref DBRouteTable2
      SubnetId: !Ref DBSubnet2

  AppSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock:
        !Select [
          6,
          !Cidr [
            !Ref CidrBlock,
            9,
            !FindInMap [CidrBitsMap, !Ref SubnetMask, "CidrBits"],
          ],
        ]
      Tags:
        - Key: Name
          Value:
            !Join ["-", [!Ref "AWS::StackName", "app", !Select [2, !GetAZs ""]]]
        - Key: Network
          Value: Private
      VpcId: !Ref VPC

  AppRouteTable3:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-app-${AppSubnet3.AvailabilityZone}"
        - Key: Network
          Value: Private

  AppRouteTableAssociation3:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref AppRouteTable3
      SubnetId: !Ref AppSubnet3

  PublicSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock:
        !Select [
          7,
          !Cidr [
            !Ref CidrBlock,
            9,
            !FindInMap [CidrBitsMap, !Ref SubnetMask, "CidrBits"],
          ],
        ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            !Join [
              "-",
              [!Ref "AWS::StackName", "public", !Select [2, !GetAZs ""]],
            ]
        - Key: Network
          Value: Public
      VpcId: !Ref VPC

  PublicRouteTable3:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-public-${PublicSubnet3.AvailabilityZone}"
        - Key: Network
          Value: Public

  PublicRouteTableAssociation3:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable3
      SubnetId: !Ref PublicSubnet3

  PublicRoute3:
    Type: "AWS::EC2::Route"
    Condition: CreateInternetGateway
    DependsOn: InternetGatewayAttachment
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId: !Ref PublicRouteTable3
      GatewayId: !Ref InternetGateway

  DBSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock:
        !Select [
          8,
          !Cidr [
            !Ref CidrBlock,
            9,
            !FindInMap [CidrBitsMap, !Ref SubnetMask, "CidrBits"],
          ],
        ]
      Tags:
        - Key: Name
          Value:
            !Join ["-", [!Ref "AWS::StackName", "db", !Select [2, !GetAZs ""]]]
        - Key: Network
          Value: Private
      VpcId: !Ref VPC

  DBRouteTable3:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-db-${DBSubnet3.AvailabilityZone}"
        - Key: Network
          Value: Private

  DBRouteTableAssociation3:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref DBRouteTable3
      SubnetId: !Ref DBSubnet3

  DBNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-db-nacl
        - Key: Network
          Value: NACL Protected

  DBNetworkAclIngress100:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock:
        # AppSubnet1.CidrBlock
        !Select [
          0,
          !Cidr [
            !Ref CidrBlock,
            9,
            !FindInMap [CidrBitsMap, !Ref SubnetMask, "CidrBits"],
          ],
        ]
      Egress: false
      NetworkAclId: !Ref DBNetworkAcl
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100

  DBNetworkAclEgress100:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock:
        # AppSubnet1.CidrBlock
        !Select [
          0,
          !Cidr [
            !Ref CidrBlock,
            9,
            !FindInMap [CidrBitsMap, !Ref SubnetMask, "CidrBits"],
          ],
        ]
      Egress: true
      NetworkAclId: !Ref DBNetworkAcl
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100

  DBNetworkAclIngress101:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock:
        # AppSubnet2.CidrBlock
        !Select [
          3,
          !Cidr [
            !Ref CidrBlock,
            9,
            !FindInMap [CidrBitsMap, !Ref SubnetMask, "CidrBits"],
          ],
        ]
      Egress: false
      NetworkAclId: !Ref DBNetworkAcl
      Protocol: -1
      RuleAction: allow
      RuleNumber: 101

  DBNetworkAclEgress101:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock:
        # AppSubnet2.CidrBlock
        !Select [
          3,
          !Cidr [
            !Ref CidrBlock,
            9,
            !FindInMap [CidrBitsMap, !Ref SubnetMask, "CidrBits"],
          ],
        ]
      Egress: true
      NetworkAclId: !Ref DBNetworkAcl
      Protocol: -1
      RuleAction: allow
      RuleNumber: 101

  DBNetworkAclIngress102:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock:
        # AppSubnet3.CidrBlock
        !Select [
          6,
          !Cidr [
            !Ref CidrBlock,
            9,
            !FindInMap [CidrBitsMap, !Ref SubnetMask, "CidrBits"],
          ],
        ]
      Egress: false
      NetworkAclId: !Ref DBNetworkAcl
      Protocol: -1
      RuleAction: allow
      RuleNumber: 102

  DBNetworkAclEgress102:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock:
        # AppSubnet3.CidrBlock
        !Select [
          6,
          !Cidr [
            !Ref CidrBlock,
            9,
            !FindInMap [CidrBitsMap, !Ref SubnetMask, "CidrBits"],
          ],
        ]
      Egress: true
      NetworkAclId: !Ref DBNetworkAcl
      Protocol: -1
      RuleAction: allow
      RuleNumber: 102

  DBSubnetNetworkAclAssociation1:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref DBSubnet1
      NetworkAclId: !Ref DBNetworkAcl

  DBSubnetNetworkAclAssociation2:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref DBSubnet2
      NetworkAclId: !Ref DBNetworkAcl

  DBSubnetNetworkAclAssociation3:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref DBSubnet3
      NetworkAclId: !Ref DBNetworkAcl

  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: !Ref "AWS::StackName"
      SubnetIds:
        - !Ref DBSubnet1
        - !Ref DBSubnet2
        - !Ref DBSubnet3

  ElastiCacheSubnetGroup:
    Type: "AWS::ElastiCache::SubnetGroup"
    Properties:
      Description: !Ref "AWS::StackName"
      SubnetIds:
        - !Ref DBSubnet1
        - !Ref DBSubnet2
        - !Ref DBSubnet3

  S3VPCEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Condition: CreateVPCEndpoints
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:*"
            Resource: "*"
      RouteTableIds:
        - !Ref AppRouteTable1
        - !Ref AppRouteTable2
        - !Ref AppRouteTable3
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcEndpointType: Gateway
      VpcId: !Ref VPC

  DynamoDBVPCEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Condition: CreateVPCEndpoints
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "dynamodb:*"
            Resource: "*"
      RouteTableIds:
        - !Ref AppRouteTable1
        - !Ref AppRouteTable2
        - !Ref AppRouteTable3
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.dynamodb"
      VpcEndpointType: Gateway
      VpcId: !Ref VPC

  LogBucket:
    Type: "AWS::S3::Bucket"
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} VPC FlowLogs"

  LogBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref LogBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AWSLogDeliveryAclCheck
            Effect: Allow
            Principal:
              Service: "delivery.logs.amazonaws.com"
            Action: "s3:GetBucketAcl"
            Resource: !GetAtt LogBucket.Arn
          - Sid: AWSLogDeliveryWrite
            Effect: Allow
            Principal:
              Service: "delivery.logs.amazonaws.com"
            Action: "s3:PutObject"
            Resource: !Sub "${LogBucket.Arn}/AWSLogs/${AWS::AccountId}/*"
            Condition:
              StringEquals:
                "s3:x-amz-acl": "bucket-owner-full-control"

  VPCFlowLog:
    Type: "AWS::EC2::FlowLog"
    DependsOn: LogBucketPolicy
    Properties:
      LogDestinationType: s3
      LogDestination: !GetAtt LogBucket.Arn
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
